{"version":3,"sources":["food1.jpeg","logo.svg","food2.jpeg","food3.jpeg","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyMenu","useState","curMenu","setCurMenu","handleItemClick","e","name","items","key","content","active","onClick","style","width","Menu","pointing","MyContent","props","color","textAlign","ImgList","Segment","imgSrc","page","setPage","food1","food2","food3","borderless","src","alt","maxWidth","App","className","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,4QCqB3C,SAASC,IAAS,MAEcC,mBAAS,MAFvB,mBAETC,EAFS,KAEAC,EAFA,KAGVC,EAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAsCH,EAApBD,IAAYI,EAAmB,KAAmBA,IAEtFC,EAAQ,CACZ,CACEC,IAAK,oBACLF,KAAM,oBACNG,QAAS,2BACTC,OAAqB,sBAAZR,EACTS,QAASP,GAEX,CACEI,IAAK,QACLF,KAAM,QACNG,QAAS,eACTC,OAAqB,UAAZR,EACTS,QAASP,GAEX,CACEI,IAAK,eACLF,KAAM,eACNG,QAAS,eACTC,OAAqB,iBAAZR,EACTS,QAASP,IAIb,OACE,yBAAKQ,MAAoB,OAAZV,EAAoB,KAAO,CAAEW,MAAO,SAC/C,kBAACC,EAAA,EAAD,CAAMC,UAAQ,EAACR,MAAOA,IACtB,kBAACS,EAAD,CAAWd,QAASA,KAK1B,SAASc,EAAUC,GACjB,IAAIR,EAEJ,OAAQQ,EAAMf,SACZ,IAAK,oBACHO,EACE,uBAAGG,MAAO,CAAEM,MAAO,QAASC,UAAW,SAAvC,uCACQ,6BADR,8BAC0B,6BAD1B,wCAEO,MACX,IAAK,QACHV,EACE,uBAAGG,MAAO,CAAEM,MAAO,QAASC,UAAW,SACrC,kBAACC,EAAD,OACK,MACX,IAAK,eACHX,EACE,uBAAGG,MAAO,CAAEM,MAAO,QAASC,UAAW,SAAvC,+DACiB,6BADjB,6CAEO,MACX,QACE,OAAO,KAGX,OACE,kBAACE,EAAA,EAAD,KACGZ,GAKP,SAASW,EAAQH,GAAQ,IASnBK,EATkB,EACErB,mBAAS,KADX,mBACfsB,EADe,KACTC,EADS,KAEhBpB,EAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAiBkB,EAAQlB,IAC3CC,EAAQ,CACZ,CAAEC,IAAK,KAAMF,KAAM,IAAKI,OAAiB,MAATa,EAAcZ,QAASP,GACvD,CAAEI,IAAK,KAAMF,KAAM,IAAKI,OAAiB,MAATa,EAAcZ,QAASP,GACvD,CAAEI,IAAK,KAAMF,KAAM,IAAKI,OAAiB,MAATa,EAAcZ,QAASP,IAIzD,OAAQmB,GACN,IAAK,IAAKD,EAASG,IAAO,MAC1B,IAAK,IAAKH,EAASI,IAAO,MAC1B,IAAK,IAAKJ,EAASK,IAAO,MAC1B,QAASL,EAASG,IAGpB,OACE,6BACE,kBAACX,EAAA,EAAD,CAAMc,YAAU,EAACb,UAAQ,EAACR,MAAOA,IACjC,kBAACc,EAAA,EAAD,KACE,yBAAKQ,IAAKP,EAAQQ,IAAI,gBAAgBlB,MAAO,CAAEmB,SAAU,YAMlDC,MAzGf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKJ,IAAKK,IAAMD,UAAU,WAAWH,IAAI,SACzC,kBAAC9B,EAAD,CAAQiC,UAAU,gBCHNE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a451bf62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/food1.81219821.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/food2.aa7b56dd.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/food3.5311619a.jpeg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport food1 from './food1.jpeg';\nimport food2 from './food2.jpeg';\nimport food3 from './food3.jpeg';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Menu, Segment } from 'semantic-ui-react';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <MyMenu className=\"App-menu\" />\n      </header>\n    </div>\n  );\n}\n\nfunction MyMenu() {\n  //set state for main menu\n  const [curMenu, setCurMenu] = useState(null);\n  const handleItemClick = (e, { name }) => (curMenu === name) ? setCurMenu(null) : setCurMenu(name);\n  //menu items\n  const items = [\n    {\n      key: 'self-introduction',\n      name: 'self-introduction',\n      content: '自我介紹',\n      active: (curMenu === 'self-introduction'),\n      onClick: handleItemClick\n    },\n    {\n      key: 'album',\n      name: 'album',\n      content: '相簿',\n      active: (curMenu === 'album'),\n      onClick: handleItemClick\n    },\n    {\n      key: 'announcement',\n      name: 'announcement',\n      content: '聲明',\n      active: (curMenu === 'announcement'),\n      onClick: handleItemClick\n    }\n  ]\n  //handling click twice\n  return (\n    <div style={(curMenu === null) ? null : { width: \"40vw\" }} >\n      <Menu pointing items={items} />\n      <MyContent curMenu={curMenu} />\n    </div>\n  )\n}\n//The content of main menu items\nfunction MyContent(props) {\n  var content;\n\n  switch (props.curMenu) {\n    case 'self-introduction':\n      content = (\n        <p style={{ color: 'black', textAlign: \"left\" }}>\n          姓名：馮子軒<br />學號：b06901052<br />系級：電機四\n        </p>); break;\n    case 'album':\n      content = (\n        <p style={{ color: 'black', textAlign: \"left\" }}>\n          <ImgList />\n        </p>); break;\n    case 'announcement':\n      content = (\n        <p style={{ color: 'black', textAlign: \"left\" }}>\n          圖片取自開源圖庫Pexels。<br />樣式取自Semantic-UI。\n        </p>); break;\n    default:\n      return null;\n  }\n\n  return (\n    <Segment>\n      {content}\n    </Segment>\n  )\n}\n//the img list for the album\nfunction ImgList(props) {\n  const [page, setPage] = useState(\"1\");\n  const handleItemClick = (e, { name }) => setPage(name);\n  const items = [\n    { key: \"i1\", name: '1', active: page === '1', onClick: handleItemClick },\n    { key: \"i2\", name: '2', active: page === '2', onClick: handleItemClick },\n    { key: \"i3\", name: '3', active: page === '3', onClick: handleItemClick }\n  ];\n\n  var imgSrc;\n  switch (page) {\n    case '1': imgSrc = food1; break;\n    case '2': imgSrc = food2; break;\n    case '3': imgSrc = food3; break;\n    default: imgSrc = food1;\n  }\n\n  return (\n    <div>\n      <Menu borderless pointing items={items} />\n      <Segment>\n        <img src={imgSrc} alt='this is a img' style={{ maxWidth: \"100%\" }} />\n      </Segment>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}